from RSALibrary import *
from math import log
import time
from sympy import *
from random import randint
import random

def unit_test1(kv, lv, dv, textv):
    (p1, p2) = choose_modulus(kv, lv, dv)
    m = p1 * p2
    e = choose_encryption_key(p1, p2)
    d = compute_decryption_key(e, p1, p2)
    plaintext = textv
    P = string_to_int(plaintext)
    print("P = ", P)
    C = RSA_encrypt(P, e, m)
    print("Plaintext: ", plaintext)
    print("Text Len: ", 8*len(plaintext), "bits")
    print("Modulus len: ",  int(log(m)/log(2)), "bits")
    print("C = ", C)
    D = RSA_decrypt(C, d, m)
    print("D = ", D)
    decoded_text = int_to_string(D)
    print("Decoded Text: ", decoded_text, "\n\n--------------\n")

def unit_test2(kv, lv, dv, textv):
    (p1, p2) = choose_modulus(kv, lv, dv)
    m = p1 * p2
    print("\n")
    #print(m)
    e = choose_encryption_key(p1, p2)
    #d = compute_decryption_key(e, p1, p2)
    plaintext = textv
    P = string_to_int(plaintext)
    #print("P = ", P)
    C = RSA_encrypt(P, e, m)
    #print("Plaintext: ", plaintext)
    #print("Text Len: ", 8*len(plaintext), "bits")
    #print("Modulus len: ",  int(log(m)/log(2)), "bits")
    #print("C = ", C)
    D = RSA_crack(C, e, m)
    #print("D = ", D)
    #decoded_text = int_to_string(D)
    #print("Decoded Text: ", decoded_text, "\n\n--------------\n")

'''

if __name__ == "__main__":
    unit_test1(10, 12, 1, "Hi")
    unit_test1(200,201,50,"I've got the best RSA. Tremendous!")
    unit_test2(10, 12, 5, "Hi")
'''

'''
#encrypt

m = 300338667020730825046238613875899578531476701782137286458318272977084661502974333517292980096577870153433354233366721684560166115642058743150149764284674097497077391642600921048649673597882399534882722644356510475631
e = 42905523860104402062185665080681382953131749429315188663303552262403582255072573028914548570266038135433721771333753540545403379112144619611631818289332113773388532032330269257355883535192891454303180058210133344257
P = string_to_int("Steelers beat Dolphins and Ravens!")
C = RSA_encrypt(P, e, m)
print(C)
print("\n--------\n\n")



#decrypt

d = 101764868970888832535874005128417019305319008136393454222252690642671739168503468253914696572210949999975749086591648952133733575998501766107146320738798443409791132946532862334011804107939640146533355766103202823393
#C = 9513602130858526451708579402477091866169587002111536725752206349436538403336152246241059844218709672366682434361651481133
D = RSA_decrypt(C, d, m)
print(D)
print(int_to_string(D))
'''


'''
print("\n\n\n------------------------------\n\n\n")

for i in range(0,50):
    startTime = time.time()
    unit_test2(40, 42, 5+2*i, "Lets go Penguins!")
    print(5+2*i)
    print(time.time()-startTime)
'''


'''
m1 = 300338667020730825046238613875899578531476701782137286458318272977084661502974333517292980096577870153433354233366721684560166115642058743150149764284674097497077391642600921048649673597882399534882722644356510475631
e1 = 42905523860104402062185665080681382953131749429315188663303552262403582255072573028914548570266038135433721771333753540545403379112144619611631818289332113773388532032330269257355883535192891454303180058210133344257
d1 = 101764868970888832535874005128417019305319008136393454222252690642671739168503468253914696572210949999975749086591648952133733575998501766107146320738798443409791132946532862334011804107939640146533355766103202823393

#m2 = 1444931413276831368901350064715459795111933402928135829199717615485579469616721528882602021070255264639050077534440227912936549068963645496218391517866749348442251705528684780200535232923807884978329929833698938426531
#e2 = 206418773325261609503229507003846492042496654686034887134574216651484678422754543832543520563946866807158755241929060685775174391455939105340907215542856837653245137326101607518754554202642708057315419440978006638593
#d2 = 1246909940784491821730120492115869874854943664370564908158873198233076893157364938390347531547794301004469788197972349415307471458333600219855136385599493820611691230976629204327038558921400483427956161856051465232857
#m2 = 4498036823121810549059142333246563831590620482766213506371709109456411549214803936213662954420821542671355268234216324373
#e2 = 1277401368500063065149400982331215402250921297045153524295526965794438542408903238924357610432301930419581457646514984371
m2 = 3231136800599257141167167378364565452194452914567212671534787221688215666217339446674306433289409617028313005719446577917059252187441301916689459414316513321451637804868623683328201796727871474524491874740761783
e2 = 2186804874353586194321270657458417821489133109826104499704964494629820307536796428737494954932846385075488945847302525441064559006722899436515964430054692347186259057520424377505493540288169043282871805288278593
#encrypt

#P = string_to_int("Lets go Penguins!")
#D = RSA_decrypt(P,d2,m2)
#C = RSA_encrypt(D,e1,m1)


P = string_to_int("Lets go Penguins!")
D = RSA_decrypt(P,d1,m1)
C = RSA_encrypt(D,e2,m2)
print(C)

#decrypt
#m2 = 4498036823121810549059142333246563831590620482766213506371709109456411549214803936213662954420821542671355268234216324373
#e2 = 1277401368500063065149400982331215402250921297045153524295526965794438542408903238924357610432301930419581457646514984371
#$C = 265250195063405289016410507978600617496892899654255815373080347554480040952900878439151362510983879030872409014406536407416247904620124813567909776653525734680508141716691033429564257478989100647180449212135069377065
#D = RSA_decrypt(C, d1, m1)
#C = RSA_encrypt(D, e2, m2)
#print(int_to_string(C))
'''


def millerRabin(n,k):
    d = n-1
    r=0
    innerBreak = False
    while d%2==0:
        d//=2
        r+=1
    d = int(d)
    for i in range(0,k):
        a = randint(2,n-2)
        x = pow(a,d,n)
        if x==1 or x==n-1:
            continue
        for j in range(0,r-1):
            x = pow(x,2,n)
            if x==1:
                return "Composite"
            if x==n-1:
                innerBreak = True
                break
        if innerBreak==True:
            innerBreak=False
            continue
        return "Composite"
    return "Probably Prime"

'''
for k in range(10,210):
    if k%10==0:
        count=0
        for i in range(0,1000):
            x = int(random.getrandbits(200))
            mr = millerRabin(x,k)
            if isprime(x)==True:
                if mr == "Probably Prime":
                    count+=1
            else:
                if mr == "Composite":
                    count+=1
        print(k)
        print(count/10)
        print()'''


charmichaelNums = [561,41041,825265,321197185,5394826801,232250619601,9746347772161,1436697831295441,60977817398996785,7156857700403137441,1791562810662585767521,87674969936234821377601,260849323075371835669784094383812120359260783810157225730623388382401]

for num in charmichaelNums:
    k=1
    while(True):
        k+=1
        x = millerRabin(num,k)
        if x == "Composite":
            break
    print(num)
    print(k)